# peak-service/schema.py

import graphene
from mock_peaks import get_mock_peaks  # Importujemy dane ze sztucznego ≈∫r√≥d≈Ça (mock)

# Definicja typu obiektu, kt√≥ry mo≈ºna pobieraƒá w zapytaniach GraphQL
class Peak(graphene.ObjectType):
    name = graphene.String()             # nazwa szczytu
    height = graphene.Int()              # wysoko≈õƒá w metrach
    pasmo = graphene.String()            # pasmo g√≥rskie
    wojewodztwo = graphene.String()      # wojew√≥dztwo, w kt√≥rym znajduje siƒô szczyt

# G≈Ç√≥wna klasa zawierajƒÖca definicje zapyta≈Ñ (query fields)
class Query(graphene.ObjectType):
    # Definiujemy pole `peaks`, kt√≥re mo≈ºna odpytywaƒá z opcjonalnymi filtrami
    peaks = graphene.List(
        Peak,                            # typ danych zwracanych przez zapytanie (lista obiekt√≥w Peak)
        min_height=graphene.Int(),       # opcjonalny parametr: minimalna wysoko≈õƒá
        wojewodztwo=graphene.String()    # opcjonalny parametr: filtracja po wojew√≥dztwie
    )

    # üîç Funkcja resolve_<pole> s≈Çu≈ºy do obs≈Çugi logiki dla danego pola zapytania
    # W tym przypadku: `resolve_peaks` odpowiada za zwracanie danych dla pola `peaks`

    def resolve_peaks(self, info, min_height=None, wojewodztwo=None):
        """
        Funkcja wywo≈Çywana automatycznie przez graphene, gdy klient wykonuje zapytanie o pole `peaks`.

        Parametry:
        - info: kontekst wykonania zapytania (dostƒôp do nag≈Ç√≥wk√≥w, u≈ºytkownika, itp.)
        - min_height: opcjonalna filtracja po minimalnej wysoko≈õci
        - wojewodztwo: opcjonalna filtracja po wojew√≥dztwie

        Zwraca: listƒô obiekt√≥w Peak spe≈ÇniajƒÖcych zadane kryteria
        """

        all_peaks = get_mock_peaks()  # pobranie wszystkich szczyt√≥w z mocka

        # Filtrowanie po wysoko≈õci
        if min_height:
            all_peaks = [p for p in all_peaks if p["height"] >= min_height]

        # Filtrowanie po wojew√≥dztwie
        if wojewodztwo:
            all_peaks = [p for p in all_peaks if p["wojewodztwo"] == wojewodztwo]

        # Zwracamy listƒô obiekt√≥w typu Peak
        return [
            Peak(
                name=p["name"],
                height=p["height"],
                pasmo=p["pasmo"],
                wojewodztwo=p["wojewodztwo"]
            ) for p in all_peaks
        ]

# Zdefiniowanie schematu g≈Ç√≥wnego GraphQL ‚Äì potrzebne w app.py do wykonania zapyta≈Ñ
schema = graphene.Schema(query=Query)
